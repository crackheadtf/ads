KNN DISTANCE BASED
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import NearestNeighbors
from sklearn.datasets import make_blobs

np.random.seed(42)

def generate_sample_data(n_samples=100, n_outliers=10):
    X, _ = make_blobs(n_samples=n_samples, centers=1, cluster_std=1.0, random_state=42)
    outliers = np.random.uniform(low=-10, high=10, size=(n_outliers, 2))
    X_with_outliers = np.vstack([X, outliers])
    y = np.zeros(n_samples + n_outliers)
    y[n_samples:] = 1
    return X_with_outliers, y

def detect_outliers_knn(X, k=5, threshold_factor=1.5):
    nbrs = NearestNeighbors(n_neighbors=k+1).fit(X)
    distances, indices = nbrs.kneighbors(X)
    distances = distances[:, 1:]
    avg_distances = np.mean(distances, axis=1)
    threshold = np.mean(avg_distances) + threshold_factor * np.std(avg_distances)
    outlier_indices = np.where(avg_distances > threshold)[0]
    return outlier_indices, avg_distances, threshold

X, y_true = generate_sample_data(n_samples=200, n_outliers=15)
outlier_indices, distances, threshold = detect_outliers_knn(X, k=5, threshold_factor=2.0)
X_cleaned = np.delete(X, outlier_indices, axis=0)

plt.figure(figsize=(16, 5))
plt.subplot(1, 3, 1)
plt.scatter(X[:, 0], X[:, 1], c=['blue' if label == 0 else 'red' for label in y_true], alpha=0.6)
plt.title('Original Data with True Outliers (Red)')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.grid(alpha=0.3)

plt.subplot(1, 3, 2)
colors = ['blue'] * len(X)
for idx in outlier_indices:
    colors[idx] = 'red'
plt.scatter(X[:, 0], X[:, 1], c=colors, alpha=0.6)
plt.title(f'Detected Outliers using KNN (k=5)\nFound {len(outlier_indices)} outliers')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.grid(alpha=0.3)

plt.subplot(1, 3, 3)
plt.scatter(X_cleaned[:, 0], X_cleaned[:, 1], c='blue', alpha=0.6)
plt.title(f'Data After Removing Outliers\n{len(X) - len(X_cleaned)} points removed')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.grid(alpha=0.3)

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(distances, bins=30, alpha=0.7, color='skyblue', edgecolor='black')
plt.axvline(x=threshold, color='red', linestyle='--', linewidth=2, label=f'Threshold: {threshold:.3f}')
plt.title('Distribution of Average Distances to K-Nearest Neighbors')
plt.xlabel('Average Distance to 5-Nearest Neighbors')
plt.ylabel('Frequency')
plt.legend()
plt.grid(alpha=0.3)
plt.show()

results = pd.DataFrame({
    'Point': range(len(X)),
    'Feature_1': X[:, 0],
    'Feature_2': X[:, 1],
    'Avg_Distance_to_KNN': distances,
    'Is_Outlier': ['Yes' if i in outlier_indices else 'No' for i in range(len(X))],
    'True_Label': ['Outlier' if label == 1 else 'Inlier' for label in y_true]
})

print("Detected Outliers:")
print(results[results['Is_Outlier'] == 'Yes'].sort_values(by='Avg_Distance_to_KNN', ascending=False))

true_outliers = np.where(y_true == 1)[0]
true_positives = np.intersect1d(outlier_indices, true_outliers)
false_positives = np.setdiff1d(outlier_indices, true_outliers)
false_negatives = np.setdiff1d(true_outliers, outlier_indices)

precision = len(true_positives) / len(outlier_indices) if len(outlier_indices) > 0 else 0
recall = len(true_positives) / len(true_outliers) if len(true_outliers) > 0 else 0
f1_score = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0

print(f"\nOutlier Detection Performance:")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1_score:.4f}")

def apply_knn_outlier_detection(df, features, k=5, threshold_factor=2.0):
    X = df[features].values
    outlier_indices, _, _ = detect_outliers_knn(X, k, threshold_factor)
    outlier_df = df.iloc[outlier_indices].copy()
    cleaned_df = df.drop(df.index[outlier_indices]).reset_index(drop=True)
    return cleaned_df, outlier_df

from sklearn.datasets import load_iris

iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['species'] = iris.target

print("\nDemo with Iris Dataset:")
print(f"Original Iris Dataset Shape: {iris_df.shape}")

iris_cleaned, iris_outliers = apply_knn_outlier_detection(iris_df, features=iris.feature_names, k=5, threshold_factor=2.0)

print(f"Cleaned Iris Dataset Shape: {iris_cleaned.shape}")
print(f"Removed {len(iris_outliers)} outliers")
if len(iris_outliers) > 0:
    print("\nDetected Outliers in Iris Dataset:")
    print(iris_outliers)








DBSCAN CLUSTERING
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import DBSCAN

np.random.seed(42)

def generate_data_with_outliers(n_samples=300, n_outliers=20):
    # Generate clustered data
    X, _ = make_blobs(n_samples=n_samples, centers=3, cluster_std=1.0, random_state=42)

    outliers = np.random.uniform(low=-10, high=10, size=(n_outliers, 2))
    X = np.vstack([X, outliers])

    y = np.ones(X.shape[0])
    y[-n_outliers:] = -1

    return X, y

X, true_labels = generate_data_with_outliers(n_samples=300, n_outliers=20)

X_scaled = StandardScaler().fit_transform(X)

def detect_remove_outliers_dbscan(data, eps=0.5, min_samples=5):
    dbscan = DBSCAN(eps=eps, min_samples=min_samples)
    labels = dbscan.fit_predict(data)

    outlier_mask = labels == -1
    outliers = data[outlier_mask]

    data_cleaned = data[~outlier_mask]
    labels_cleaned = labels[~outlier_mask]

    return data_cleaned, labels, outliers
X_cleaned, labels, outliers = detect_remove_outliers_dbscan(
    X_scaled,
    eps=0.3,
    min_samples=10
)

n_outliers_detected = np.sum(labels == -1)
print(f"Number of points in dataset: {X_scaled.shape[0]}")
print(f"Number of outliers detected: {n_outliers_detected}")
print(f"Number of points after outlier removal: {X_cleaned.shape[0]}")

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=true_labels, cmap='viridis',
            alpha=0.8, edgecolors='k', linewidth=0.5)
plt.title('Original Data\nTrue Outliers in Yellow')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.colorbar(label='Class')
plt.grid(alpha=0.3)

plt.subplot(1, 3, 2)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=labels, cmap='viridis',
            alpha=0.8, edgecolors='k', linewidth=0.5)
plt.title('DBSCAN Clustering Results\nOutliers in Yellow')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.colorbar(label='Cluster')
plt.grid(alpha=0.3)

plt.subplot(1, 3, 3)
plt.scatter(X_cleaned[:, 0], X_cleaned[:, 1], c='blue', alpha=0.8,
            edgecolors='k', linewidth=0.5, label='Clean Data')
plt.scatter(outliers[:, 0], outliers[:, 1], c='red', alpha=0.8, marker='x', s=100,
            label='Removed Outliers')
plt.title('Data After Outlier Removal')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.grid(alpha=0.3)

plt.tight_layout()
plt.show()

def apply_to_housing_example():
    np.random.seed(42)

    house_sizes = np.random.normal(2000, 300, 100)

    house_prices = 150 + 0.2 * house_sizes + np.random.normal(0, 50, 100)

    outlier_sizes = np.array([1500, 1600, 3000, 2800, 1200])
    outlier_prices = np.array([800, 750, 100, 120, 600])

    sizes = np.concatenate([house_sizes, outlier_sizes])
    prices = np.concatenate([house_prices, outlier_prices])
    housing_data = np.column_stack([sizes, prices])
    scaler = StandardScaler()
    housing_scaled = scaler.fit_transform(housing_data)

    housing_cleaned, housing_labels, housing_outliers = detect_remove_outliers_dbscan(
        housing_scaled, eps=0.5, min_samples=5
    )

    housing_data_original = scaler.inverse_transform(housing_scaled)
    housing_cleaned_original = scaler.inverse_transform(housing_cleaned)
    housing_outliers_original = scaler.inverse_transform(housing_outliers)

    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.scatter(housing_data_original[:, 0], housing_data_original[:, 1], alpha=0.7,
                edgecolors='k', linewidth=0.5)
    plt.title('Original Housing Data')
    plt.xlabel('House Size (sq ft)')
    plt.ylabel('House Price ($K)')
    plt.grid(alpha=0.3)

    plt.subplot(1, 2, 2)
    plt.scatter(housing_cleaned_original[:, 0], housing_cleaned_original[:, 1],
                alpha=0.7, edgecolors='k', linewidth=0.5, label='Clean Data')
    plt.scatter(housing_outliers_original[:, 0], housing_outliers_original[:, 1],
                c='red', alpha=0.8, marker='x', s=100, label='Detected Outliers')
    plt.title('Housing Data After Outlier Removal')
    plt.xlabel('House Size (sq ft)')
    plt.ylabel('House Price ($K)')
    plt.legend()
    plt.grid(alpha=0.3)
    plt.tight_layout()
    plt.show()
    print(f"\nHousing Example:")
    print(f"Total data points: {housing_data.shape[0]}")
    print(f"Outliers detected: {housing_outliers.shape[0]}")
    print(f"Clean data points: {housing_cleaned.shape[0]}")

    return housing_cleaned_original, housing_outliers_original

cleaned_housing, outlier_housing = apply_to_housing_example()


