import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, balanced_accuracy_score
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE
from collections import Counter

np.random.seed(42)

X, y = make_classification(
    n_samples=5000,
    n_features=10,
    n_informative=5,
    n_redundant=2,
    n_clusters_per_class=1,
    weights=[0.9, 0.1],
    random_state=42
)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

counter_before = Counter(y_train)
print("Class distribution before SMOTE:")
for class_label, count in counter_before.items():
    print(f"Class {class_label}: {count} samples ({count / len(y_train) * 100:.2f}%)")

smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

counter_after = Counter(y_train_smote)
print("\nClass distribution after SMOTE:")
for class_label, count in counter_after.items():
    print(f"Class {class_label}: {count} samples ({count / len(y_train_smote) * 100:.2f}%)")

def train_and_evaluate(X_train_data, y_train_data, X_test_data, y_test_data, model_name):
    classifier = RandomForestClassifier(n_estimators=100, random_state=42)
    classifier.fit(X_train_data, y_train_data)
    
    y_pred = classifier.predict(X_test_data)
    
    balanced_acc = balanced_accuracy_score(y_test_data, y_pred)
    conf_matrix = confusion_matrix(y_test_data, y_pred)
    class_report = classification_report(y_test_data, y_pred, output_dict=True)
    
    print(f"\n--- {model_name} ---")
    print(f"Balanced Accuracy: {balanced_acc:.4f}")
    print("Confusion Matrix:")
    print(conf_matrix)
    print("\nClassification Report:")
    print(classification_report(y_test_data, y_pred))
    
    return {
        "model_name": model_name,
        "balanced_accuracy": balanced_acc,
        "minority_class_recall": class_report['1']['recall'],
        "minority_class_precision": class_report['1']['precision'],
        "minority_class_f1": class_report['1']['f1-score']
    }

results_without_smote = train_and_evaluate(X_train, y_train, X_test, y_test, "Random Forest without SMOTE")
results_with_smote = train_and_evaluate(X_train_smote, y_train_smote, X_test, y_test, "Random Forest with SMOTE")

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.bar(['Class 0', 'Class 1'], [counter_before[0], counter_before[1]], color=['skyblue', 'orange'])
plt.title('Class Distribution Before SMOTE')
plt.ylabel('Number of Samples')
plt.grid(axis='y', alpha=0.3)
plt.subplot(1, 2, 2)
plt.bar(['Class 0', 'Class 1'], [counter_after[0], counter_after[1]], color=['skyblue', 'orange'])
plt.title('Class Distribution After SMOTE')
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
metrics = ['balanced_accuracy', 'minority_class_recall', 'minority_class_precision', 'minority_class_f1']
metric_names = ['Balanced Accuracy', 'Minority Class Recall', 'Minority Class Precision', 'Minority Class F1']
x = np.arange(len(metrics))
width = 0.35
plt.bar(x - width/2, [results_without_smote[m] for m in metrics], width, label='Without SMOTE', color='skyblue')
plt.bar(x + width/2, [results_with_smote[m] for m in metrics], width, label='With SMOTE', color='orange')
plt.ylabel('Score')
plt.title('Performance Comparison: With vs. Without SMOTE')
plt.xticks(x, metric_names, rotation=15)
plt.ylim(0, 1.0)
plt.legend()
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
features = [f"Feature {i+1}" for i in range(X.shape[1])]
importance = RandomForestClassifier(n_estimators=100, random_state=42).fit(X_train_smote, y_train_smote).feature_importances_
indices = np.argsort(importance)
plt.barh(range(len(indices)), importance[indices], color='green')
plt.yticks(range(len(indices)), [features[i] for i in indices])
plt.xlabel('Feature Importance')
plt.title('Feature Importance in Random Forest with SMOTE')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
original_minority_indices = np.where(y_train == 1)[0]
original_minority_samples = X_train[original_minority_indices]
smote_minority_indices = np.where(y_train_smote == 1)[0]
smote_minority_samples = X_train_smote[smote_minority_indices]
synthetic_samples = smote_minority_samples[len(original_minority_indices):]
plt.scatter(X_train[y_train == 0, 0], X_train[y_train == 0, 1], alpha=0.3, label='Original Majority Class', color='blue')
plt.scatter(original_minority_samples[:, 0], original_minority_samples[:, 1], alpha=0.7, label='Original Minority Class', color='red')
plt.scatter(synthetic_samples[:, 0], synthetic_samples[:, 1], alpha=0.5, label='Synthetic Minority Samples', color='green')
plt.title('Original vs Synthetic Samples (First Two Features)')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.grid(alpha=0.3)
plt.show()

